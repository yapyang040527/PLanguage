{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPIJzj1r63ILhjVxcuiqkf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yapyang040527/Yang1141/blob/main/HW1_%E6%97%A5%E5%B8%B8%E6%94%AF%E5%87%BA%E9%80%9F%E7%AE%97%E8%88%87%E5%88%86%E6%94%A4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 日常支出速算與分攤（作業一）\n",
        "\n",
        "\n",
        "*   目標：從 Sheet 讀「消費紀錄」→ 計總額/分類小計/AA 分攤 → 寫回 Sheet Summary 分頁。\n",
        "\n",
        "*  AI 點子（可選）：請模型總結本週花錢習慣與建議（例如「外食過多」）。\n",
        "*  Sheet 欄位: date, category, item, amount, payer\n",
        "\n",
        "\n",
        "\n",
        "GoogleSheet: ttps://docs.google.com/spreadsheets/d/1gtKuA4gHxt3JQgH9SV9St_7KtBb3YjdjVMsx7nLhYEw/edit?gid=0#gid=0"
      ],
      "metadata": {
        "id": "i8c94vbvhYsn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import gradio as gr\n",
        "import pandas as pd\n",
        "import datetime\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "from google.auth import default\n",
        "import matplotlib.pyplot as plt\n",
        "import io"
      ],
      "metadata": {
        "id": "Ce_Cwn1egP0Z"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ==================== Google Sheets 設定 ====================\n",
        "SHEET_URL = \"https://docs.google.com/spreadsheets/d/1gtKuA4gHxt3JQgH9SV9St_7KtBb3YjdjVMsx7nLhYEw/edit?gid=0#gid=0\"\n",
        "WORKSHEET_NAME = \"工作表1\"\n",
        "# 將 日期 欄位移動到最後\n",
        "REQUIRED_COLUMNS = [\"體重(公斤)\", \"身高(公分)\", \"運動類型\", \"運動時間(分鐘)\", \"運動消耗(大卡)\", \"BMI\", \"健康分析\", \"日期\"]\n",
        "\n",
        "_auth_done = False\n",
        "_gc = None\n",
        "_ws = None"
      ],
      "metadata": {
        "id": "qvNjSEbEg1Ga"
      },
      "execution_count": 154,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _ensure_auth_and_ws():\n",
        "    \"\"\"驗證並取得工作表物件，同時確保表頭正確。\"\"\"\n",
        "    global _auth_done, _gc, _ws\n",
        "    if not _auth_done:\n",
        "        auth.authenticate_user()\n",
        "        creds, _ = default()\n",
        "        _gc = gspread.authorize(creds)\n",
        "        _auth_done = True\n",
        "    if _ws is None:\n",
        "        try:\n",
        "            gs = _gc.open_by_url(SHEET_URL)\n",
        "            _ws = gs.worksheet(WORKSHEET_NAME)\n",
        "            _ensure_headers()\n",
        "        except gspread.WorksheetNotFound:\n",
        "            return f\"錯誤：找不到工作表 '{WORKSHEET_NAME}'\"\n",
        "        except Exception as e:\n",
        "            return f\"認證或連接錯誤：{e}\"\n",
        "    return _ws"
      ],
      "metadata": {
        "id": "QQutoW0xkQWl"
      },
      "execution_count": 155,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _ensure_headers():\n",
        "    \"\"\"確保表頭符合 REQUIRED_COLUMNS。\"\"\"\n",
        "    rows = _ws.get_all_values()\n",
        "    if not rows or rows[0] != REQUIRED_COLUMNS:\n",
        "        _ws.update('1:1', [REQUIRED_COLUMNS])"
      ],
      "metadata": {
        "id": "jZFcofZOi4Nd"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _read_df():\n",
        "    \"\"\"從 Google Sheet 讀取資料並轉換為 DataFrame。\"\"\"\n",
        "    ws = _ensure_auth_and_ws()\n",
        "    if isinstance(ws, str): return pd.DataFrame(columns=REQUIRED_COLUMNS)\n",
        "\n",
        "    values = ws.get_all_values()\n",
        "    if not values or len(values) < 2:\n",
        "        return pd.DataFrame(columns=REQUIRED_COLUMNS)\n",
        "\n",
        "    df = pd.DataFrame(values[1:], columns=values[0])\n",
        "\n",
        "    df[\"日期\"] = pd.to_datetime(df[\"日期\"], errors=\"coerce\")\n",
        "    for col in [\"體重(公斤)\", \"身高(公分)\", \"運動時間(分鐘)\", \"運動消耗(大卡)\", \"BMI\"]:\n",
        "        df[col] = pd.to_numeric(df[col], errors=\"coerce\").fillna(0.0)\n",
        "\n",
        "    return df.sort_values(by=\"日期\").reset_index(drop=True)"
      ],
      "metadata": {
        "id": "3ktmoT4_xro2"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _calculate_bmi(weight, height):\n",
        "    \"\"\"根據體重（公斤）和身高（公分）計算 BMI。\"\"\"\n",
        "    if float(height) <= 0:\n",
        "        return 0\n",
        "    height_m = float(height) / 100\n",
        "    return float(weight) / (height_m ** 2)"
      ],
      "metadata": {
        "id": "-YFmF8rUkbFf"
      },
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _analyze_bmi(bmi):\n",
        "    \"\"\"根據 BMI 數值分析健康狀態。\"\"\"\n",
        "    if bmi < 18.5:\n",
        "        return \"**體重過輕**。建議增加體重以達到健康標準。\"\n",
        "    elif 18.5 <= bmi < 24:\n",
        "        return \"**體重正常**。請持續保持良好習慣！\"\n",
        "    elif 24 <= bmi < 27:\n",
        "        return \"**體重過重**。建議透過飲食控制和運動來調整體重。\"\n",
        "    else:\n",
        "        return \"**肥胖**。請注意健康，建議尋求專業協助以管理體重。\""
      ],
      "metadata": {
        "id": "CTMFtZtPrCPJ"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _calculate_exercise_calories(exercise_type, duration_minutes):\n",
        "    \"\"\"根據運動類型和時長估算消耗的卡路里。\"\"\"\n",
        "    calories_per_minute = {\n",
        "        \"跑步\": 10,\n",
        "        \"游泳\": 8,\n",
        "        \"騎腳踏車\": 7,\n",
        "        \"爬山\": 6,\n",
        "        \"打羽球\": 5,\n",
        "        \"打籃球\": 7,\n",
        "        \"打排球\": 4\n",
        "    }\n",
        "    if exercise_type in calories_per_minute and float(duration_minutes) > 0:\n",
        "        return calories_per_minute[exercise_type] * float(duration_minutes)\n",
        "    return 0"
      ],
      "metadata": {
        "id": "9sObhQTGkekx"
      },
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ==================== 數據處理與圖表生成 ====================\n",
        "def add_record(date_str, weight, height, exercise_type, exercise_duration):\n",
        "    \"\"\"新增健康紀錄並寫入 Google Sheet。\"\"\"\n",
        "    try:\n",
        "        if not date_str or not weight or not height:\n",
        "            return \"❌ 日期、體重和身高為必填\", None, None, None, None, None, None, None\n",
        "\n",
        "        try:\n",
        "            date_val = datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date().strftime(\"%Y-%m-%d\")\n",
        "        except:\n",
        "            return \"❌ 日期格式錯誤，請使用 YYYY-MM-DD\", None, None, None, None, None, None, None\n",
        "\n",
        "        if exercise_type and not exercise_duration:\n",
        "            return \"❌ 請輸入運動時長\", None, None, None, None, None, None, None\n",
        "\n",
        "        calories_burned = _calculate_exercise_calories(exercise_type, exercise_duration)\n",
        "        latest_bmi = _calculate_bmi(weight, height)\n",
        "        bmi_analysis_text = _analyze_bmi(latest_bmi)\n",
        "\n",
        "        ws = _ensure_auth_and_ws()\n",
        "        if isinstance(ws, str): return ws, None, None, None, None, None, None, None\n",
        "\n",
        "        # 這裡將資料順序調整以匹配新的 REQUIRED_COLUMNS 列表\n",
        "        ws.append_row(\n",
        "            [float(weight), float(height), exercise_type, float(exercise_duration or 0), calories_burned, latest_bmi, bmi_analysis_text, date_val],\n",
        "            value_input_option=\"USER_ENTERED\"\n",
        "        )\n",
        "        msg = f\"✅ 已新增 {date_val} 的健康紀錄！\"\n",
        "\n",
        "        return refresh_summary(msg)\n",
        "\n",
        "    except Exception as e:\n",
        "        return f\"❌ 新增失敗：{e}\", None, None, None, None, None, None, None"
      ],
      "metadata": {
        "id": "ERyxNRMokgAa"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def refresh_summary(message=\"✅ 已更新健康彙總\"):\n",
        "    \"\"\"讀取最新資料並產生總結與圖表。\"\"\"\n",
        "    try:\n",
        "        df = _read_df()\n",
        "        if isinstance(df, str): return df, 0, 0, 0, None, None, None\n",
        "        if df.empty:\n",
        "            return \"目前沒有健康紀錄\", 0, 0, 0, None, None, None\n",
        "\n",
        "        total_exercise = df[\"運動時間(分鐘)\"].sum()\n",
        "        avg_weight = df[\"體重(公斤)\"].mean()\n",
        "        avg_height = df[\"身高(公分)\"].mean()\n",
        "\n",
        "        latest_bmi = _calculate_bmi(df[\"體重(公斤)\"].iloc[-1], df[\"身高(公分)\"].iloc[-1]) if not df.empty and df[\"體重(公斤)\"].iloc[-1] > 0 and df[\"身高(公分)\"].iloc[-1] > 0 else 0\n",
        "\n",
        "        analysis_text = _analyze_data(df)\n",
        "        weight_plot = _create_weight_plot(df)\n",
        "        calories_plot = _create_calories_plot(df)\n",
        "\n",
        "        return message, total_exercise, avg_weight, avg_height, analysis_text, [weight_plot, calories_plot], f\"**{latest_bmi:.2f}**\"\n",
        "\n",
        "    except Exception as e:\n",
        "        return f\"❌ 讀取失敗：{e}\", 0, 0, 0, None, None, None, None"
      ],
      "metadata": {
        "id": "WQKBJC22lEzw"
      },
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _analyze_data(df: pd.DataFrame):\n",
        "    \"\"\"根據數據提供簡單的趨勢分析。\"\"\"\n",
        "    if len(df) < 2:\n",
        "        return \"資料量不足，請多記錄幾筆以進行趨勢分析。\"\n",
        "\n",
        "    analysis_lines = []\n",
        "\n",
        "    # === 體重分析 ===\n",
        "    weight_analysis = _analyze_weight_trend(df)\n",
        "    analysis_lines.append(f\"### 體重趨勢\\n{weight_analysis}\")\n",
        "\n",
        "    # === BMI 分析 ===\n",
        "    latest_bmi = _calculate_bmi(df[\"體重(公斤)\"].iloc[-1], df[\"身高(公分)\"].iloc[-1])\n",
        "    bmi_analysis = _analyze_bmi(latest_bmi)\n",
        "    analysis_lines.append(f\"### BMI 分析\\n- 最新 BMI 數值：**{latest_bmi:.2f}**\\n- 您的健康狀態為：{bmi_analysis}\")\n",
        "\n",
        "    # === 運動消耗分析 ===\n",
        "    overall_avg_exercise_calories = df[\"運動消耗(大卡)\"].mean()\n",
        "    last_week_data = df[df[\"日期\"] >= (df[\"日期\"].max() - pd.DateOffset(days=7))]\n",
        "    if len(last_week_data) >= 2:\n",
        "        weekly_avg_exercise_calories = last_week_data[\"運動消耗(大卡)\"].mean()\n",
        "        calories_diff = weekly_avg_exercise_calories - overall_avg_exercise_calories\n",
        "        if abs(calories_diff) > 20: # 設定一個閾值\n",
        "            direction = \"增加\" if calories_diff > 0 else \"減少\"\n",
        "            analysis_lines.append(f\"### 近期運動\\n- **卡路里消耗**：較歷史平均{direction}了 **{abs(calories_diff):.0f}** 大卡。\")\n",
        "\n",
        "    if len(analysis_lines) == 1 and \"體重數據不足\" in analysis_lines[0]:\n",
        "        return \"資料量不足，請多記錄幾筆以進行趨勢分析。\"\n",
        "\n",
        "    return \"\\n\\n\".join(analysis_lines)"
      ],
      "metadata": {
        "id": "8AbBdSX9paNO"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _analyze_weight_trend(df: pd.DataFrame):\n",
        "    \"\"\"專門分析體重趨勢的函式。\"\"\"\n",
        "    if len(df) < 2:\n",
        "        return \"體重數據不足，請多記錄幾筆。\"\n",
        "\n",
        "    last_three = df.tail(3)\n",
        "    if len(last_three) < 2:\n",
        "        return \"體重數據不足，請多記錄幾筆。\"\n",
        "\n",
        "    last_weight = last_three[\"體重(公斤)\"].iloc[-1]\n",
        "    avg_last_three = last_three[\"體重(公斤)\"].mean()\n",
        "    overall_avg_weight = df[\"體重(公斤)\"].mean()\n",
        "\n",
        "    if last_weight > avg_last_three + 0.2:\n",
        "        trend = \"體重呈現**上升趨勢**。\"\n",
        "        suggestion = \"建議檢視近期飲食與運動習慣。\"\n",
        "    elif last_weight < avg_last_three - 0.2:\n",
        "        trend = \"體重呈現**下降趨勢**。\"\n",
        "        suggestion = \"恭喜！朝目標邁進，持續保持！\"\n",
        "    else:\n",
        "        trend = \"體重**維持穩定**。\"\n",
        "        suggestion = \"持續保持，這是個好習慣。\"\n",
        "\n",
        "    if last_weight > overall_avg_weight + 0.1:\n",
        "        avg_comp = f\"目前體重略高於整體平均 **{overall_avg_weight:.2f}** 公斤。\"\n",
        "    elif last_weight < overall_avg_weight - 0.1:\n",
        "        avg_comp = f\"目前體重略低於整體平均 **{overall_avg_weight:.2f}** 公斤。\"\n",
        "    else:\n",
        "        avg_comp = f\"目前體重與整體平均 **{overall_avg_weight:.2f}** 公斤相近。\"\n",
        "\n",
        "    return f\"{trend}\\n- 最近一筆體重：**{last_weight:.2f}** 公斤。\\n- {avg_comp}\\n- **建議**：{suggestion}\"\n",
        "\n",
        "def _create_weight_plot(df: pd.DataFrame):\n",
        "    \"\"\"繪製體重變化趨勢圖。\"\"\"\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    ax.plot(df[\"日期\"], df[\"體重(公斤)\"], marker='o', linestyle='-', color='b')\n",
        "    ax.set_title(\"體重變化趨勢\")\n",
        "    ax.set_xlabel(\"日期\")\n",
        "    ax.set_ylabel(\"體重 (公斤)\")\n",
        "    ax.grid(True)\n",
        "    ax.tick_params(axis='x', rotation=45)\n",
        "    plt.tight_layout()\n",
        "    buf = io.BytesIO()\n",
        "    plt.savefig(buf, format='png')\n",
        "    plt.close(fig)\n",
        "    buf.seek(0)\n",
        "    return buf.getvalue()\n",
        "\n",
        "def _create_calories_plot(df: pd.DataFrame):\n",
        "    \"\"\"繪製運動消耗長條圖。\"\"\"\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    ax.bar(df[\"日期\"], df[\"運動消耗(大卡)\"], color='green')\n",
        "    ax.set_title(\"每日運動消耗\")\n",
        "    ax.set_xlabel(\"日期\")\n",
        "    ax.set_ylabel(\"運動消耗 (大卡)\")\n",
        "    ax.grid(axis='y')\n",
        "    ax.tick_params(axis='x', rotation=45)\n",
        "    plt.tight_layout()\n",
        "    buf = io.BytesIO()\n",
        "    plt.savefig(buf, format='png')\n",
        "    plt.close(fig)\n",
        "    buf.seek(0)\n",
        "    return buf.getvalue()"
      ],
      "metadata": {
        "id": "iy-rV8NLpc-f"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ==================== Gradio 介面建構 ====================\n",
        "with gr.Blocks(title=\"個人健康追蹤器\") as demo:\n",
        "    gr.Markdown(\"## 💪 個人健康追蹤器\\n- 每日記錄體重、身高、運動\\n- 自動計算 BMI 與運動消耗，並產生數據總結與圖表\\n- 讀寫工作表：`工作表1`\")\n",
        "\n",
        "    with gr.Tab(\"📝 新增紀錄\"):\n",
        "        with gr.Row():\n",
        "            date_in = gr.Textbox(label=\"日期 YYYY-MM-DD\", value=datetime.date.today().strftime(\"%Y-%m-%d\"))\n",
        "            weight_in = gr.Textbox(label=\"體重 (公斤)\", placeholder=\"請輸入數字\")\n",
        "        with gr.Row():\n",
        "            height_in = gr.Textbox(label=\"身高 (公分)\", placeholder=\"請輸入數字\")\n",
        "\n",
        "        gr.Markdown(\"### 運動紀錄\")\n",
        "        with gr.Row():\n",
        "            exercise_options = [\"跑步\", \"游泳\", \"騎腳踏車\", \"爬山\", \"打羽球\", \"打籃球\", \"打排球\"]\n",
        "            exercise_type_in = gr.Dropdown(label=\"選擇運動類型\", choices=exercise_options, value=\"跑步\")\n",
        "            exercise_duration_in = gr.Textbox(label=\"運動時間 (分鐘)\", placeholder=\"請輸入數字\")\n",
        "\n",
        "        add_btn = gr.Button(\"新增紀錄\")\n",
        "\n",
        "        add_msg = gr.Markdown()\n",
        "        total_exercise_out = gr.Number(label=\"累積運動時間 (分鐘)\", interactive=False)\n",
        "        avg_weight_out = gr.Number(label=\"平均體重 (公斤)\", interactive=False)\n",
        "        avg_height_out = gr.Number(label=\"平均身高 (公分)\", interactive=False)\n",
        "        analysis_text_out = gr.Markdown()\n",
        "        bmi_out = gr.Markdown(label=\"最新 BMI\")\n",
        "\n",
        "        add_btn.click(\n",
        "            fn=add_record,\n",
        "            inputs=[date_in, weight_in, height_in, exercise_type_in, exercise_duration_in],\n",
        "            outputs=[add_msg, total_exercise_out, avg_weight_out, avg_height_out, analysis_text_out, gr.Gallery(), bmi_out]\n",
        "        )\n",
        "\n",
        "    with gr.Tab(\"📊 彙總與圖表\"):\n",
        "        refresh_btn = gr.Button(\"讀取最新彙總與圖表\")\n",
        "        msg_summary = gr.Markdown()\n",
        "        total_exercise_out2 = gr.Number(label=\"累積運動時間 (分鐘)\", interactive=False)\n",
        "        avg_weight_out2 = gr.Number(label=\"平均體重 (公斤)\", interactive=False)\n",
        "        avg_height_out2 = gr.Number(label=\"平均身高 (公分)\", interactive=False)\n",
        "        analysis_text_out2 = gr.Markdown()\n",
        "        bmi_out2 = gr.Markdown(label=\"最新 BMI\")\n",
        "\n",
        "        gallery = gr.Gallery(label=\"數據圖表\", value=[], interactive=False)\n",
        "\n",
        "        refresh_btn.click(\n",
        "            fn=refresh_summary,\n",
        "            inputs=[],\n",
        "            outputs=[msg_summary, total_exercise_out2, avg_weight_out2, avg_height_out2, analysis_text_out2, gallery, bmi_out2]\n",
        "        )\n",
        "\n",
        "    with gr.Tab(\"📒 檢視原始資料\"):\n",
        "        view_btn = gr.Button(\"讀取資料\")\n",
        "        view_df = gr.Dataframe(label=\"全部資料\", interactive=False)\n",
        "\n",
        "        def _view_all():\n",
        "            try:\n",
        "                df = _read_df()\n",
        "                if isinstance(df, str):\n",
        "                     return pd.DataFrame({\"錯誤\": [df]})\n",
        "                if df.empty:\n",
        "                    return pd.DataFrame(columns=REQUIRED_COLUMNS)\n",
        "                return df\n",
        "            except Exception as e:\n",
        "                return pd.DataFrame({\"錯誤\": [str(e)]})\n",
        "\n",
        "        view_btn.click(fn=_view_all, inputs=[], outputs=[view_df])\n",
        "\n",
        "# 啟動介面\n",
        "demo.launch(share=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "GSSp1N_lzyyM",
        "outputId": "5a2a2af1-f2ed-49cb-f98f-4fd93c922999"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "Note: opening Chrome Inspector may crash demo inside Colab notebooks.\n",
            "* To create a public link, set `share=True` in `launch()`.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, width, height, cache, element) => {\n",
              "                        if (!google.colab.kernel.accessAllowed && !cache) {\n",
              "                            return;\n",
              "                        }\n",
              "                        element.appendChild(document.createTextNode(''));\n",
              "                        const url = await google.colab.kernel.proxyPort(port, {cache});\n",
              "\n",
              "                        const external_link = document.createElement('div');\n",
              "                        external_link.innerHTML = `\n",
              "                            <div style=\"font-family: monospace; margin-bottom: 0.5rem\">\n",
              "                                Running on <a href=${new URL(path, url).toString()} target=\"_blank\">\n",
              "                                    https://localhost:${port}${path}\n",
              "                                </a>\n",
              "                            </div>\n",
              "                        `;\n",
              "                        element.appendChild(external_link);\n",
              "\n",
              "                        const iframe = document.createElement('iframe');\n",
              "                        iframe.src = new URL(path, url).toString();\n",
              "                        iframe.height = height;\n",
              "                        iframe.allow = \"autoplay; camera; microphone; clipboard-read; clipboard-write;\"\n",
              "                        iframe.width = width;\n",
              "                        iframe.style.border = 0;\n",
              "                        element.appendChild(iframe);\n",
              "                    })(7871, \"/\", \"100%\", 500, false, window.element)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    }
  ]
}
